/* tslint:disable */
/**
* @description Derive seed from HHA hApp ID bytes, email, and password
*
* @example
* const hha_id = new Uint8Array([
*     66, 123, 133, 136, 133,   6, 247, 116,
*      4,  59,  43, 206, 131, 168, 123,  44,
*     54,  52,   3,  53, 134,  75, 137,  43,
*     63,  26, 216, 191,  67, 117,  38, 142
* ]);
*
* deriveSeedFrom( hha_id, \'example@holo.host\', \'password\' ); // Uint8Array [ ... ]
* @param {Uint8Array} hha_id 
* @param {string} email 
* @param {string} password 
* @returns {Uint8Array} 
*/
export function deriveSeedFrom(hha_id: Uint8Array, email: string, password: string): Uint8Array;
/**
*/
export class KeyManager {
  free(): void;
/**
* @description Create an Ed25519 key manager out of seed
* @see deriveSeedFrom
* @example
* const hha_id = new crypto.subtle.digest( \"SHA-256\", new Uint8Array( [] ));
* const seed = deriveSeedFrom( hha_id, \"example@holo.host\", \"password\" );
*
* new KeyManager( seed );
* @param {Uint8Array} seed 
* @returns {KeyManager} 
*/
  constructor(seed: Uint8Array);
/**
* @description Get public key bytes
*
* @example
* const keys = new KeyManager( seed );
*
* keys.publicKey() // Uint8Array [ ... ]
* @returns {Uint8Array} 
*/
  publicKey(): Uint8Array;
/**
* @description Sign message and return signature bytes
*
* @example
* const keys = new KeyManager( seed );
* const message = new Uint8Array( [0xca, 0xfe] );
*
* keys.sign( message ); // Uint8Array [ ... ]
* @param {Uint8Array} message 
* @returns {Uint8Array} 
*/
  sign(message: Uint8Array): Uint8Array;
/**
* @description Verify signed message against manager\'s public key
*
* @example
* const keys = new KeyManager( seed );
* const message = new Uint8Array( [0xca, 0xfe] );
* const signature = keys.sign( message );
*
* keys.verify( message, signature ) === true;
* @param {Uint8Array} message 
* @param {Uint8Array} signature_bytes 
* @returns {boolean} 
*/
  verify(message: Uint8Array, signature_bytes: Uint8Array): boolean;
/**
* @description Verify signed message with provided public key
* @param {Uint8Array} message 
* @param {Uint8Array} signature_bytes 
* @param {Uint8Array} public_key_bytes 
* @returns {boolean} 
*/
  static verifyWithPublicKey(message: Uint8Array, signature_bytes: Uint8Array, public_key_bytes: Uint8Array): boolean;
}
