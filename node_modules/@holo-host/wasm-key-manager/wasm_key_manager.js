import * as wasm from './wasm_key_manager_bg.wasm';

let cachegetUint8Memory = null;
function getUint8Memory() {
    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory;
}

let WASM_VECTOR_LEN = 0;

function passArray8ToWasm(arg) {
    const ptr = wasm.__wbindgen_malloc(arg.length * 1);
    getUint8Memory().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}

let cachegetInt32Memory = null;
function getInt32Memory() {
    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory;
}

function getArrayU8FromWasm(ptr, len) {
    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);
}

let cachedTextEncoder = new TextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm(arg) {

    let len = arg.length;
    let ptr = wasm.__wbindgen_malloc(len);

    const mem = getUint8Memory();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = wasm.__wbindgen_realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}
/**
* @description Derive seed from HHA hApp ID bytes, email, and password
*
* @example
* const hha_id = new Uint8Array([
*     66, 123, 133, 136, 133,   6, 247, 116,
*      4,  59,  43, 206, 131, 168, 123,  44,
*     54,  52,   3,  53, 134,  75, 137,  43,
*     63,  26, 216, 191,  67, 117,  38, 142
* ]);
*
* deriveSeedFrom( hha_id, \'example@holo.host\', \'password\' ); // Uint8Array [ ... ]
* @param {Uint8Array} hha_id
* @param {string} email
* @param {string} password
* @returns {Uint8Array}
*/
export function deriveSeedFrom(hha_id, email, password) {
    const retptr = 8;
    const ret = wasm.deriveSeedFrom(retptr, passArray8ToWasm(hha_id), WASM_VECTOR_LEN, passStringToWasm(email), WASM_VECTOR_LEN, passStringToWasm(password), WASM_VECTOR_LEN);
    const memi32 = getInt32Memory();
    const v0 = getArrayU8FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();
    wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);
    return v0;
}

const heap = new Array(32);

heap.fill(undefined);

heap.push(undefined, null, true, false);

function getObject(idx) { return heap[idx]; }

let heap_next = heap.length;

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

function getStringFromWasm(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));
}

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}
/**
*/
export class KeyManager {

    static __wrap(ptr) {
        const obj = Object.create(KeyManager.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_keymanager_free(ptr);
    }
    /**
    * @description Create an Ed25519 key manager out of seed
    * @see deriveSeedFrom
    * @example
    * const hha_id = new crypto.subtle.digest( \"SHA-256\", new Uint8Array( [] ));
    * const seed = deriveSeedFrom( hha_id, \"example@holo.host\", \"password\" );
    *
    * new KeyManager( seed );
    * @param {Uint8Array} seed
    * @returns {KeyManager}
    */
    constructor(seed) {
        const ret = wasm.keymanager_new(passArray8ToWasm(seed), WASM_VECTOR_LEN);
        return KeyManager.__wrap(ret);
    }
    /**
    * @description Get public key bytes
    *
    * @example
    * const keys = new KeyManager( seed );
    *
    * keys.publicKey() // Uint8Array [ ... ]
    * @returns {Uint8Array}
    */
    publicKey() {
        const retptr = 8;
        const ret = wasm.keymanager_publicKey(retptr, this.ptr);
        const memi32 = getInt32Memory();
        const v0 = getArrayU8FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();
        wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);
        return v0;
    }
    /**
    * @description Sign message and return signature bytes
    *
    * @example
    * const keys = new KeyManager( seed );
    * const message = new Uint8Array( [0xca, 0xfe] );
    *
    * keys.sign( message ); // Uint8Array [ ... ]
    * @param {Uint8Array} message
    * @returns {Uint8Array}
    */
    sign(message) {
        const retptr = 8;
        const ret = wasm.keymanager_sign(retptr, this.ptr, passArray8ToWasm(message), WASM_VECTOR_LEN);
        const memi32 = getInt32Memory();
        const v0 = getArrayU8FromWasm(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1]).slice();
        wasm.__wbindgen_free(memi32[retptr / 4 + 0], memi32[retptr / 4 + 1] * 1);
        return v0;
    }
    /**
    * @description Verify signed message against manager\'s public key
    *
    * @example
    * const keys = new KeyManager( seed );
    * const message = new Uint8Array( [0xca, 0xfe] );
    * const signature = keys.sign( message );
    *
    * keys.verify( message, signature ) === true;
    * @param {Uint8Array} message
    * @param {Uint8Array} signature_bytes
    * @returns {boolean}
    */
    verify(message, signature_bytes) {
        const ret = wasm.keymanager_verify(this.ptr, passArray8ToWasm(message), WASM_VECTOR_LEN, passArray8ToWasm(signature_bytes), WASM_VECTOR_LEN);
        return ret !== 0;
    }
    /**
    * @description Verify signed message with provided public key
    * @param {Uint8Array} message
    * @param {Uint8Array} signature_bytes
    * @param {Uint8Array} public_key_bytes
    * @returns {boolean}
    */
    static verifyWithPublicKey(message, signature_bytes, public_key_bytes) {
        const ret = wasm.keymanager_verifyWithPublicKey(passArray8ToWasm(message), WASM_VECTOR_LEN, passArray8ToWasm(signature_bytes), WASM_VECTOR_LEN, passArray8ToWasm(public_key_bytes), WASM_VECTOR_LEN);
        return ret !== 0;
    }
}

export const __wbindgen_object_drop_ref = function(arg0) {
    takeObject(arg0);
};

export const __wbg_new_b523d83e932ae6ee = function(arg0, arg1) {
    const ret = new Error(getStringFromWasm(arg0, arg1));
    return addHeapObject(ret);
};

export const __wbg_new_59cb74e423758ede = function() {
    const ret = new Error();
    return addHeapObject(ret);
};

export const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {
    const ret = getObject(arg1).stack;
    const ret0 = passStringToWasm(ret);
    const ret1 = WASM_VECTOR_LEN;
    getInt32Memory()[arg0 / 4 + 0] = ret0;
    getInt32Memory()[arg0 / 4 + 1] = ret1;
};

export const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {
    const v0 = getStringFromWasm(arg0, arg1).slice();
    wasm.__wbindgen_free(arg0, arg1 * 1);
    console.error(v0);
};

export const __wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm(arg0, arg1));
};

export const __wbindgen_rethrow = function(arg0) {
    throw takeObject(arg0);
};

